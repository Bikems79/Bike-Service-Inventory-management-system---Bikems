@page "/approve"
@using Bike_Service_IMS.Data;

@if (hasRequests == true && isOpen==true)
{
    <h3>Approve Requests</h3>
    <MudSimpleTable Style="overflow-x: auto;" Class="my-5">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Requested Date</th>
                <th>Requested By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var requests in itemReqs)
            {
                @if (requests.IsApproved == false)
                {
                    <tr>
                        <td>@requests.Name</td>
                        <td>@requests.Quantity</td>
                        <td>@requests.RequestedDate.ToString("MMM dd, yyyy h:mm tt")</td>
                        <td>@requests.RequestedBy</td>
                        <td>
                            <MudButton OnClick="()=>RequestItem(requests)" Variant="Variant.Filled" Color="Color.Primary" class="mt-3">
                                Approve
                            </MudButton>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </MudSimpleTable>
    @if (showApproveMessage == true)
    {
        <MudAppBar Color="Color.Tertiary" Fixed="false" Class="my-5">
            <MudText Typo="Typo.body1">Do you want to approve the request of <strong>@approveItemRequest.Name</strong> made by <strong>@approveItemRequest.RequestedBy</strong>?</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Success" Class="col-md-1 me-2" OnClick="ApproveRequest">Yes</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" Class="col-md-1" OnClick="CloseCard">No</MudButton>
        </MudAppBar>
    }
    @if (showErrorMessage == true)
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
}
<MudAppBar Color="Color.Tertiary" Fixed="false">
    <MudText Typo="Typo.h5" Class="fw-bold">Approved Item Requests</MudText>
</MudAppBar>
@if (hasReqApproved == true)
{
    <MudSimpleTable Style="overflow-x: auto;" Class="mt-5">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Requested Date</th>
                <th>Requested By</th>
                <th>Approved Date</th>
                <th>Approved By</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var requests in itemReqs)
            {
                @if (requests.IsApproved == true)
                {
                    <tr>
                        <td>@requests.Name</td>
                        <td>@requests.Quantity</td>
                        <td>@requests.RequestedDate.ToString("MMM dd, yyyy h:mm tt")</td>
                        <td>@requests.RequestedBy</td>
                        <td>@requests.ApprovedDate.ToString("MMM dd, yyyy h:mm tt")</td>
                        <td>@requests.ApprovedBy</td>
                    </tr>
                }

            }
        </tbody>
    </MudSimpleTable>
}

@code {
    List<ItemRequest> itemReqs { get; set; }
    ItemRequest approveItemRequest { get; set; }
    bool showApproveMessage = false;
    bool showErrorMessage = false;
    public string errorMessage = "";
    public DateTime approvedDate = DateTime.Now;
    private bool isApproved = false;
    private bool hasReqApproved = false;
    private bool hasRequests = true;
    public bool isOpen { get; set; }
    [CascadingParameter]
    UserState userState { get; set; }
    protected override void OnInitialized()
    {
        isOpen = UserServices.CheckTime();
        itemReqs = UserServices.ReadItemReq();
        ShowTable();
        StateHasChanged();
    }
    public void ShowTable()
    {
        int countRequests = 0;
        foreach (var itemReq in itemReqs)
        {
            if (itemReq.IsApproved == false)
            {
                countRequests++;
            }
        }
        if (countRequests >= 1)
        {
            hasRequests = true;
        }
        else
        {
            hasRequests = false;
        }
        int countApprove = 0;
        foreach (var itemReq in itemReqs)
        {
            if (itemReq.IsApproved == true)
            {
                countApprove++;
            }
        }
        if (countApprove >= 1)
        {
            hasReqApproved = true;
        }
        else
        {
            hasReqApproved = false;
        }
    }
    public void RequestItem(ItemRequest itemRequest)
    {
        approveItemRequest = itemRequest;
        showApproveMessage = true;
    }
    public void CloseCard()
    {
        showApproveMessage = false;
    }
    public void ApproveRequest()
    {
        CloseCard();
        try
        {
            isApproved = true;
            itemReqs = UserServices.Approve(approveItemRequest.Id, approveItemRequest.Name, userState.CurrentUser.Username, approvedDate, isApproved);
            UserServices.AddOtherItemDetail(approveItemRequest.Name, approvedDate, approveItemRequest.Quantity);

            ShowTable();
            approveItemRequest = null;
        }
        catch (Exception e)
        {
            showErrorMessage = true;
            errorMessage = e.Message;
        }
    }
}
